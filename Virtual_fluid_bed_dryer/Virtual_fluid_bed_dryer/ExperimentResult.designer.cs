#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.17929
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Virtual_fluid_bed_dryer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class ExperimentResultDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExperimentResult(ExperimentResult instance);
    partial void UpdateExperimentResult(ExperimentResult instance);
    partial void DeleteExperimentResult(ExperimentResult instance);
    #endregion
		
		public ExperimentResultDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Database1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentResultDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentResultDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentResultDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExperimentResultDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ExperimentResult> ExperimentResult
		{
			get
			{
				return this.GetTable<ExperimentResult>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExperimentResult")]
	public partial class ExperimentResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Start_humidity;
		
		private double _Mass;
		
		private double _Volume_flow_rate;
		
		private double _Humidity_ratio;
		
		private double _Drying_temperature;
		
		private System.Nullable<double> _Desired_humidity_level;
		
		private System.Nullable<int> _Time_of_drying;
		
		private double _Particle_diameter;
		
		private string _Gas_type;
		
		private double _Start_gas_temperature;
		
		private double _Pressure;
		
		private double _Machine_heating_rate;
		
		private double _Product_final_hum;
		
		private double _Product_fianl_mass;
		
		private int _Total_time;
		
		private System.DateTime _Experiment_date;
		
		private int _User_id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStart_humidityChanging(int value);
    partial void OnStart_humidityChanged();
    partial void OnMassChanging(double value);
    partial void OnMassChanged();
    partial void OnVolume_flow_rateChanging(double value);
    partial void OnVolume_flow_rateChanged();
    partial void OnHumidity_ratioChanging(double value);
    partial void OnHumidity_ratioChanged();
    partial void OnDrying_temperatureChanging(double value);
    partial void OnDrying_temperatureChanged();
    partial void OnDesired_humidity_levelChanging(System.Nullable<double> value);
    partial void OnDesired_humidity_levelChanged();
    partial void OnTime_of_dryingChanging(System.Nullable<int> value);
    partial void OnTime_of_dryingChanged();
    partial void OnParticle_diameterChanging(double value);
    partial void OnParticle_diameterChanged();
    partial void OnGas_typeChanging(string value);
    partial void OnGas_typeChanged();
    partial void OnStart_gas_temperatureChanging(double value);
    partial void OnStart_gas_temperatureChanged();
    partial void OnPressureChanging(double value);
    partial void OnPressureChanged();
    partial void OnMachine_heating_rateChanging(double value);
    partial void OnMachine_heating_rateChanged();
    partial void OnProduct_final_humChanging(double value);
    partial void OnProduct_final_humChanged();
    partial void OnProduct_fianl_massChanging(double value);
    partial void OnProduct_fianl_massChanged();
    partial void OnTotal_timeChanging(int value);
    partial void OnTotal_timeChanged();
    partial void OnExperiment_dateChanging(System.DateTime value);
    partial void OnExperiment_dateChanged();
    partial void OnUser_idChanging(int value);
    partial void OnUser_idChanged();
    #endregion
		
		public ExperimentResult()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_humidity", DbType="Int NOT NULL")]
		public int Start_humidity
		{
			get
			{
				return this._Start_humidity;
			}
			set
			{
				if ((this._Start_humidity != value))
				{
					this.OnStart_humidityChanging(value);
					this.SendPropertyChanging();
					this._Start_humidity = value;
					this.SendPropertyChanged("Start_humidity");
					this.OnStart_humidityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mass", DbType="Float NOT NULL")]
		public double Mass
		{
			get
			{
				return this._Mass;
			}
			set
			{
				if ((this._Mass != value))
				{
					this.OnMassChanging(value);
					this.SendPropertyChanging();
					this._Mass = value;
					this.SendPropertyChanged("Mass");
					this.OnMassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume_flow_rate", DbType="Float NOT NULL")]
		public double Volume_flow_rate
		{
			get
			{
				return this._Volume_flow_rate;
			}
			set
			{
				if ((this._Volume_flow_rate != value))
				{
					this.OnVolume_flow_rateChanging(value);
					this.SendPropertyChanging();
					this._Volume_flow_rate = value;
					this.SendPropertyChanged("Volume_flow_rate");
					this.OnVolume_flow_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Humidity_ratio", DbType="Float NOT NULL")]
		public double Humidity_ratio
		{
			get
			{
				return this._Humidity_ratio;
			}
			set
			{
				if ((this._Humidity_ratio != value))
				{
					this.OnHumidity_ratioChanging(value);
					this.SendPropertyChanging();
					this._Humidity_ratio = value;
					this.SendPropertyChanged("Humidity_ratio");
					this.OnHumidity_ratioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Drying_temperature", DbType="Float NOT NULL")]
		public double Drying_temperature
		{
			get
			{
				return this._Drying_temperature;
			}
			set
			{
				if ((this._Drying_temperature != value))
				{
					this.OnDrying_temperatureChanging(value);
					this.SendPropertyChanging();
					this._Drying_temperature = value;
					this.SendPropertyChanged("Drying_temperature");
					this.OnDrying_temperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Desired_humidity_level", DbType="Float")]
		public System.Nullable<double> Desired_humidity_level
		{
			get
			{
				return this._Desired_humidity_level;
			}
			set
			{
				if ((this._Desired_humidity_level != value))
				{
					this.OnDesired_humidity_levelChanging(value);
					this.SendPropertyChanging();
					this._Desired_humidity_level = value;
					this.SendPropertyChanged("Desired_humidity_level");
					this.OnDesired_humidity_levelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time_of_drying", DbType="Int")]
		public System.Nullable<int> Time_of_drying
		{
			get
			{
				return this._Time_of_drying;
			}
			set
			{
				if ((this._Time_of_drying != value))
				{
					this.OnTime_of_dryingChanging(value);
					this.SendPropertyChanging();
					this._Time_of_drying = value;
					this.SendPropertyChanged("Time_of_drying");
					this.OnTime_of_dryingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Particle_diameter", DbType="Float NOT NULL")]
		public double Particle_diameter
		{
			get
			{
				return this._Particle_diameter;
			}
			set
			{
				if ((this._Particle_diameter != value))
				{
					this.OnParticle_diameterChanging(value);
					this.SendPropertyChanging();
					this._Particle_diameter = value;
					this.SendPropertyChanged("Particle_diameter");
					this.OnParticle_diameterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gas_type", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Gas_type
		{
			get
			{
				return this._Gas_type;
			}
			set
			{
				if ((this._Gas_type != value))
				{
					this.OnGas_typeChanging(value);
					this.SendPropertyChanging();
					this._Gas_type = value;
					this.SendPropertyChanged("Gas_type");
					this.OnGas_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Start_gas_temperature", DbType="Float NOT NULL")]
		public double Start_gas_temperature
		{
			get
			{
				return this._Start_gas_temperature;
			}
			set
			{
				if ((this._Start_gas_temperature != value))
				{
					this.OnStart_gas_temperatureChanging(value);
					this.SendPropertyChanging();
					this._Start_gas_temperature = value;
					this.SendPropertyChanged("Start_gas_temperature");
					this.OnStart_gas_temperatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pressure", DbType="Float NOT NULL")]
		public double Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Machine_heating_rate", DbType="Float NOT NULL")]
		public double Machine_heating_rate
		{
			get
			{
				return this._Machine_heating_rate;
			}
			set
			{
				if ((this._Machine_heating_rate != value))
				{
					this.OnMachine_heating_rateChanging(value);
					this.SendPropertyChanging();
					this._Machine_heating_rate = value;
					this.SendPropertyChanged("Machine_heating_rate");
					this.OnMachine_heating_rateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_final_hum", DbType="Float NOT NULL")]
		public double Product_final_hum
		{
			get
			{
				return this._Product_final_hum;
			}
			set
			{
				if ((this._Product_final_hum != value))
				{
					this.OnProduct_final_humChanging(value);
					this.SendPropertyChanging();
					this._Product_final_hum = value;
					this.SendPropertyChanged("Product_final_hum");
					this.OnProduct_final_humChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product_fianl_mass", DbType="Float NOT NULL")]
		public double Product_fianl_mass
		{
			get
			{
				return this._Product_fianl_mass;
			}
			set
			{
				if ((this._Product_fianl_mass != value))
				{
					this.OnProduct_fianl_massChanging(value);
					this.SendPropertyChanging();
					this._Product_fianl_mass = value;
					this.SendPropertyChanged("Product_fianl_mass");
					this.OnProduct_fianl_massChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total_time", DbType="Int NOT NULL")]
		public int Total_time
		{
			get
			{
				return this._Total_time;
			}
			set
			{
				if ((this._Total_time != value))
				{
					this.OnTotal_timeChanging(value);
					this.SendPropertyChanging();
					this._Total_time = value;
					this.SendPropertyChanged("Total_time");
					this.OnTotal_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experiment_date", DbType="Date NOT NULL")]
		public System.DateTime Experiment_date
		{
			get
			{
				return this._Experiment_date;
			}
			set
			{
				if ((this._Experiment_date != value))
				{
					this.OnExperiment_dateChanging(value);
					this.SendPropertyChanging();
					this._Experiment_date = value;
					this.SendPropertyChanged("Experiment_date");
					this.OnExperiment_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_id", DbType="Int NOT NULL")]
		public int User_id
		{
			get
			{
				return this._User_id;
			}
			set
			{
				if ((this._User_id != value))
				{
					this.OnUser_idChanging(value);
					this.SendPropertyChanging();
					this._User_id = value;
					this.SendPropertyChanged("User_id");
					this.OnUser_idChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
